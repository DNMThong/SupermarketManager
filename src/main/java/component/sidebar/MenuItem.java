package component.sidebar;

import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;


public class MenuItem extends JPanel {

    private javax.swing.JLabel lbName;
    private boolean showing = false;
    private boolean isSelected = false;
    private boolean isHovered = false;
    private Color itemColor = null;
    private Color containerColor = null;

    private Color defaultColor = new Color(255, 255, 255);
    private Color hoverEffectColor = new Color(255, 255, 255);


    public Color getContainerColor() {
        return containerColor;
    }

    public void setContainerColor(Color containerColor) {
        this.containerColor = containerColor;
    }

    public Color getItemColor() {
        return itemColor;
    }

    public void setItemColor(Color itemColor) {
        this.itemColor = itemColor;
    }



    /**
     * @param containerColor
     * @param itemColor
     */
    public void setEffectColor(Color containerColor, Color itemColor) {
        this.containerColor = containerColor;
        this.itemColor = itemColor;
    }

    public void setHoverColor(Color selectedColor) {
        this.hoverEffectColor = selectedColor;
    }

    public void setSelected(boolean isSelected) {
        handleIsSelectedChange(isSelected);
        this.isSelected = isSelected;
    }


    public void setShowing(boolean showing) {
        this.showing = showing;
    }

    public ArrayList<MenuItem> getSubMenu() {
        return subMenu;
    }

    public JLabel getItem() {
        return this.lbName;
    }

    /**
     * Creates new form MenuItem
     */
    private final ArrayList<MenuItem> subMenu = new ArrayList<>();
    private ActionListener act;

    public MenuItem(Icon icon, String menuName, MouseListener act, MenuItem... subMenu) {
        initComponents();
        lbName.setIcon(icon);
        lbName.setText(menuName);
        lbName.setOpaque(true);
//        lbName.setBackground(Color.white);
        lbName.setBorder(new EmptyBorder(0, 5, 0, 0));

        if (act != null) {
            this.addMouseListener(act);
        }
        this.setSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMaximumSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMinimumSize(new Dimension(Integer.MAX_VALUE, 45));
        GroupLayout groupLayout = new GroupLayout(this);
        groupLayout.setHorizontalGroup(
                groupLayout.createParallelGroup(Alignment.LEADING)
                        .addComponent(lbName, GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );
        groupLayout.setVerticalGroup(
                groupLayout.createParallelGroup(Alignment.LEADING)
                        .addComponent(lbName, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE)
        );
        setLayout(groupLayout);
        for (int i = 0; i < subMenu.length; i++) {

            this.subMenu.add(subMenu[i]);
            subMenu[i].setVisible(false);
            subMenu[i].setBorder(new EmptyBorder(0, 10, 0, 0));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        lbName = new javax.swing.JLabel();
        lbName.setBackground(defaultColor);
        setBackground(defaultColor);
        setHoverColor(new Color(234, 240, 252));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }

            public void mouseEntered(MouseEvent evt) {
                handleMenuHovered(evt);
            }

            public void mouseExited(MouseEvent evt) {
                handleMenuExited(evt);
            }
        });

        lbName.setText("Menu Name Here ...");
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (showing) {
            hideMenu();
        } else {
            showMenu();
        }
        if (act != null) {
//            act.actionPerformed(null);
        }
    }//GEN-LAST:event_formMousePressed


    private void showMenu() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < subMenu.size(); i++) {
                    sleep();
                    subMenu.get(i).setVisible(true);
                }
                showing = true;
                isSelected = true;
                getParent().repaint();
                getParent().revalidate();
            }
        }).start();
    }

    private void hideMenu() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = subMenu.size() - 1; i >= 0; i--) {
                    sleep();
                    subMenu.get(i).setVisible(false);
                    subMenu.get(i).hideMenu();
                }
                getParent().repaint();
                getParent().revalidate();
                showing = false;
            }
        }).start();
    }

    private void sleep() {
        try {
            Thread.sleep(20);
        } catch (Exception e) {

        }
    }

    private void handleIsSelectedChange(boolean isSelected) {
        // TODO Auto-generated method stub
        if (isSelected == false) {
            setDefaultBackground(this);
        }
    }

    // handle menu hovered
    private void handleMenuHovered(MouseEvent evt) {
        isHovered = true;
        if (isSelected == false && isHovered) {
            setBackground(hoverEffectColor);
            getItem().setBackground(hoverEffectColor);
        }
        getParent().repaint();
        getParent().revalidate();

    }

    // handle menu exited
    private void handleMenuExited(MouseEvent evt) {
        isHovered = false;
        if (isSelected == false && isHovered == false) {
            setDefaultBackground(this);
        }
        getParent().repaint();
        getParent().revalidate();
    }


    public void setDefaultBackground(MenuItem component) {
        component.setBackground(defaultColor);
        component.getItem().setBackground(defaultColor);
    }
}
